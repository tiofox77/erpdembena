<?php

namespace App\Livewire\SupplyChain;

use App\Models\SupplyChain\InventoryLocation;
use App\Models\SupplyChain\Product;
use App\Models\SupplyChain\WarehouseTransferRequest;
use App\Models\SupplyChain\WarehouseTransferRequestItem;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Livewire\Component;
use Livewire\WithPagination;

class WarehouseTransfers extends Component
{
    use WithPagination;
    
    // Component states
    public $isOpenRequestModal = false;
    public $isOpenApprovalModal = false;
    public $isOpenViewModal = false;
    public $isOpenDeleteModal = false;
    public $isOpenItemModal = false;
    
    // Transfer request data
    public $transferRequest = [
        'source_location_id' => '',
        'destination_location_id' => '',
        'priority' => 'normal',
        'requested_date' => '',
        'required_by_date' => '',
        'notes' => '',
    ];
    
    // Selected transfer request for actions
    public $selectedTransferRequest;
    public $selectedTransferRequestId;
    
    // Item data
    public $selectedItem;
    public $transferItem = [
        'product_id' => '',
        'quantity_requested' => 1,
        'notes' => '',
    ];
    
    // Data lists
    public $locations = [];
    public $items = [];
    public $availableProducts = [];
    
    // Filter and search properties
    public $search = '';
    public $statusFilter = '';
    public $priorityFilter = '';
    public $dateFrom = '';
    public $dateTo = '';
    public $sortField = 'created_at';
    public $sortDirection = 'desc';
    
    // Validation rules
    protected function rules()
    {
        return [
            'transferRequest.source_location_id' => 'required|integer|different:transferRequest.destination_location_id',
            'transferRequest.destination_location_id' => 'required|integer|different:transferRequest.source_location_id',
            'transferRequest.priority' => 'required|string|in:low,normal,high,urgent',
            'transferRequest.requested_date' => 'nullable|date',
            'transferRequest.required_by_date' => 'nullable|date|after_or_equal:transferRequest.requested_date',
            'transferRequest.notes' => 'nullable|string|max:1000',
        ];
        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
    
    protected $validationAttributes = [
        'transferRequest.source_location_id' => 'source location',
        'transferRequest.destination_location_id' => 'destination location',
        'transferRequest.priority' => 'priority',
        'transferRequest.requested_date' => 'requested date',
        'transferRequest.required_by_date' => 'required by date',
    ];

    // Listeners for events
    protected $listeners = ['refreshTable' => '$refresh'];

    public function mount()
    {
        // Initialize dates
        $this->transferRequest['requested_date'] = now()->format('Y-m-d');
        $this->transferRequest['required_by_date'] = now()->addDays(3)->format('Y-m-d');
        
        // Load locations
        $this->loadLocations();
        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
    
    // Load warehouse locations
    public function loadLocations()
    {
        $this->locations = InventoryLocation::orderBy('name')->get();
        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
    
    // Reset filters
    public function resetFilters()
    {
        $this->search = '';
        $this->statusFilter = '';
        $this->priorityFilter = '';
        $this->dateFrom = '';
        $this->dateTo = '';
        $this->resetPage();
        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
    
    // Sort results
    public function sortBy($field)
    {
        if ($this->sortField === $field) {
            $this->sortDirection = $this->sortDirection === 'asc' ? 'desc' : 'asc';
            /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
} else {
            $this->sortField = $field;
            $this->sortDirection = 'asc';
            /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
    
    /**
     * Get warehouse transfer requests with filters
     */
    public function getTransferRequestsProperty()
    {
        return WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy'])
            ->when($this->search, function($query) {
                $query->where('request_number', 'like', '%' . $this->search . '%')
                    ->orWhereHas('sourceLocation', function($q) {
                        $q->where('name', 'like', '%' . $this->search . '%');
                        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
})
                    ->orWhereHas('destinationLocation', function($q) {
                        $q->where('name', 'like', '%' . $this->search . '%');
                        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
});
                /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
})
            ->when($this->statusFilter, function($query) {
                $query->where('status', $this->statusFilter);
                /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
})
            ->when($this->priorityFilter, function($query) {
                $query->where('priority', $this->priorityFilter);
                /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
})
            ->when($this->dateFrom, function($query) {
                $query->where('requested_date', '>=', $this->dateFrom);
                /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
})
            ->when($this->dateTo, function($query) {
                $query->where('requested_date', '<=', $this->dateTo);
                /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
})
            ->orderBy($this->sortField, $this->sortDirection)
            ->paginate(10);
        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
    
    /**
     * Open modal to create a new transfer request
     */
    public function createTransferRequest()
    {
        $this->resetTransferRequest();
        $this->isOpenRequestModal = true;
        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
    
    /**
     * Reset transfer request form
     */
    public function resetTransferRequest()
    {
        $this->selectedTransferRequestId = null;
        $this->transferRequest = [
            'source_location_id' => '',
            'destination_location_id' => '',
            'priority' => 'normal',
            'requested_date' => now()->format('Y-m-d'),
            'required_by_date' => now()->addDays(3)->format('Y-m-d'),
            'notes' => '',
        ];
        $this->items = [];
        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
    
    /**
     * Store transfer request
     */
    public function storeTransferRequest()
    {
        $this->validate();
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
            /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
        
        // Create the transfer request
        $transferRequest = new WarehouseTransferRequest([
            'request_number' => WarehouseTransferRequest::generateRequestNumber(),
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'requested_by' => Auth::id(),
            'status' => WarehouseTransferRequest::STATUS_PENDING,
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
        ]);
        
        $transferRequest->save();
        
        // Save the items
        foreach ($this->items as $item) {
            $transferItem = new WarehouseTransferRequestItem([
                'product_id' => $item['product_id'],
                'quantity_requested' => $item['quantity_requested'],
                'notes' => $item['notes'] ?? null,
                'status' => WarehouseTransferRequestItem::STATUS_PENDING
            ]);
            
            $transferRequest->items()->save($transferItem);
            /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_created')
        );
        /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
    /**
     * Edit transfer request
     */
    public function editTransferRequest($id)
    {
        $this->resetTransferRequest();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($id);
        $this->selectedTransferRequestId = $id;
        
        if (!$transferRequest->isEditable()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_editable')
            );
            return;
        }
        
        // Load the transfer request data
        $this->transferRequest['source_location_id'] = $transferRequest->source_location_id;
        $this->transferRequest['destination_location_id'] = $transferRequest->destination_location_id;
        $this->transferRequest['priority'] = $transferRequest->priority;
        $this->transferRequest['requested_date'] = $transferRequest->requested_date->format('Y-m-d');
        $this->transferRequest['required_by_date'] = $transferRequest->required_by_date ? $transferRequest->required_by_date->format('Y-m-d') : null;
        $this->transferRequest['notes'] = $transferRequest->notes;
        
        // Load items
        $this->items = $transferRequest->items->map(function($item) {
            return [
                'id' => $item->id,
                'product_id' => $item->product_id,
                'product_name' => $item->product->name,
                'product_sku' => $item->product->sku,
                'quantity_requested' => $item->quantity_requested,
                'notes' => $item->notes
            ];
        })->toArray();
        
        $this->isOpenRequestModal = true;
    }
    
    /**
     * Update transfer request
     */
    public function updateTransferRequest()
    {
        $this->validate();
        
        $transferRequest = WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId);
        
        // Check if there are items
        if (count($this->items) === 0) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_no_items')
            );
            return;
        }
        
        // Update the transfer request
        $transferRequest->update([
            'source_location_id' => $this->transferRequest['source_location_id'],
            'destination_location_id' => $this->transferRequest['destination_location_id'],
            'priority' => $this->transferRequest['priority'],
            'notes' => $this->transferRequest['notes'],
            'requested_date' => $this->transferRequest['requested_date'],
            'required_by_date' => $this->transferRequest['required_by_date'],
            'status' => WarehouseTransferRequest::STATUS_PENDING
        ]);
        
        // Update/create items
        $existingItemIds = [];
        
        foreach ($this->items as $item) {
            if (isset($item['id'])) {
                // Update existing item
                $transferItem = WarehouseTransferRequestItem::find($item['id']);
                if ($transferItem) {
                    $transferItem->update([
                        'product_id' => $item['product_id'],
                        'quantity_requested' => $item['quantity_requested'],
                        'notes' => $item['notes'] ?? null,
                        'status' => WarehouseTransferRequestItem::STATUS_PENDING
                    ]);
                    $existingItemIds[] = $transferItem->id;
                }
            } else {
                // Create new item
                $transferItem = new WarehouseTransferRequestItem([
                    'product_id' => $item['product_id'],
                    'quantity_requested' => $item['quantity_requested'],
                    'notes' => $item['notes'] ?? null,
                    'status' => WarehouseTransferRequestItem::STATUS_PENDING
                ]);
                
                $transferRequest->items()->save($transferItem);
                $existingItemIds[] = $transferItem->id;
            }
        }
        
        // Delete removed items
        $transferRequest->items()
            ->whereNotIn('id', $existingItemIds)
            ->delete();
        
        $this->isOpenRequestModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_updated')
        );
    }
    
    /**
     * View transfer request
     */
    public function viewTransferRequest($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'approvedBy', 'items.product'])
            ->findOrFail($id);
        
        $this->isOpenViewModal = true;
    }
    
    /**
     * Open approval modal
     */
    public function openApprovalModal($id)
    {
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation', 'requestedBy', 'items.product'])
            ->findOrFail($id);
        
        if (!$this->selectedTransferRequest->canBeApproved()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_approvable')
            );
            return;
        }
        
        // Initialize approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $item->quantity_approved = $item->quantity_requested;
        }
        
        $this->isOpenApprovalModal = true;
    }
    
    /**
     * Approve transfer request
     */
    public function approveTransferRequest()
    {
        // Validate item quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            if ($item->quantity_approved <= 0) {
                $this->dispatch('notify', 
                    type: 'error', 
                    message: __('messages.transfer_invalid_quantities')
                );
                return;
            }
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_APPROVED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses and approved quantities
        foreach ($this->selectedTransferRequest->items as $item) {
            $status = $item->quantity_approved < $item->quantity_requested
                ? WarehouseTransferRequestItem::STATUS_PARTIAL
                : WarehouseTransferRequestItem::STATUS_APPROVED;
            
            $item->update([
                'status' => $status,
                'quantity_approved' => $item->quantity_approved
            ]);
        }
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'success', 
            message: __('messages.transfer_request_approved')
        );
    }
    
    /**
     * Reject transfer request
     */
    public function rejectTransferRequest()
    {
        if (!$this->selectedTransferRequest->canBeRejected()) {
            $this->dispatch('notify', 
                type: 'error', 
                message: __('messages.transfer_not_rejectable')
            );
            return;
        }
        
        // Update the transfer request
        $this->selectedTransferRequest->update([
            'status' => WarehouseTransferRequest::STATUS_REJECTED,
            'approved_by' => Auth::id()
        ]);
        
        // Update item statuses
        $this->selectedTransferRequest->items()->update([
            'status' => WarehouseTransferRequestItem::STATUS_REJECTED,
        ]);
        
        $this->isOpenApprovalModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_rejected')
        );
    }
    
    /**
     * Confirm delete transfer request
     */
    public function confirmDeleteTransferRequest($id)
    {
        $this->selectedTransferRequestId = $id;
        $this->selectedTransferRequest = WarehouseTransferRequest::with(['sourceLocation', 'destinationLocation'])
            ->findOrFail($id);
        $this->isOpenDeleteModal = true;
    }
    
    /**
     * Delete transfer request
     */
    public function deleteTransferRequest()
    {
        WarehouseTransferRequest::findOrFail($this->selectedTransferRequestId)->delete();
        $this->isOpenDeleteModal = false;
        $this->dispatch('notify', 
            type: 'warning', 
            message: __('messages.transfer_request_deleted')
        );
    }
    
    /**
     * Open item modal to add a new item
     */
    public function openItemModal()
    {
        $this->resetItem();
        
        // Get products available at source location
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Edit existing item
     */
    public function editItem($index)
    {
        $this->selectedItem = $index;
        $this->transferItem = [
            'product_id' => $this->items[$index]['product_id'],
            'quantity_requested' => $this->items[$index]['quantity_requested'],
            'notes' => $this->items[$index]['notes'] ?? ''
        ];
        
        // Load available products
        if ($this->transferRequest['source_location_id']) {
            $this->loadAvailableProducts();
        }
        
        $this->isOpenItemModal = true;
    }
    
    /**
     * Reset item form
     */
    public function resetItem()
    {
        $this->selectedItem = null;
        $this->transferItem = [
            'product_id' => '',
            'quantity_requested' => 1,
            'notes' => '',
        ];
    }
    
    /**
     * Load available products at source location
     */
    public function loadAvailableProducts()
    {
        $locationId = $this->transferRequest['source_location_id'];
        
        // Get products that have inventory at the source location
        $this->availableProducts = Product::whereHas('inventoryItems', function($query) use ($locationId) {
            $query->where('location_id', $locationId)
                  ->where('quantity_available', '>', 0);
        })->with(['inventoryItems' => function($query) use ($locationId) {
            $query->where('location_id', $locationId);
        }])->get()->map(function($product) {
            $inventoryItem = $product->inventoryItems->first();
            return [
                'id' => $product->id,
                'name' => $product->name,
                'sku' => $product->sku,
                'quantity_available' => $inventoryItem ? $inventoryItem->quantity_available : 0
            ];
        })->toArray();
    }
    
    /**
     * Update source location selection
     */
    public function updatedTransferRequestSourceLocationId()
    {
        // Clear items when source location changes
        $this->items = [];
    }
    
    /**
     * Add or update item
     */
    public function saveItem()
    {
        // Validate item
        $this->validate([
            'transferItem.product_id' => 'required|integer',
            'transferItem.quantity_requested' => 'required|numeric|min:0.01',
            'transferItem.notes' => 'nullable|string|max:500',
        ], [], [
            'transferItem.product_id' => __('messages.product'),
            'transferItem.quantity_requested' => __('messages.quantity'),
            'transferItem.notes' => __('messages.notes'),
        ]);
        
        // Find product
        $product = Product::findOrFail($this->transferItem['product_id']);
        
        $itemData = [
            'product_id' => $this->transferItem['product_id'],
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'quantity_requested' => $this->transferItem['quantity_requested'],
            'notes' => $this->transferItem['notes']
        ];
        
        if (is_null($this->selectedItem)) {
            // Check if product already exists in items
            $existingItemIndex = collect($this->items)->search(function($item) use ($product) {
                return $item['product_id'] == $product->id;
            });
            
            if ($existingItemIndex !== false) {
                // Update existing item
                $this->items[$existingItemIndex]['quantity_requested'] += $this->transferItem['quantity_requested'];
                $this->items[$existingItemIndex]['notes'] = $this->transferItem['notes'];
            } else {
                // Add new item
                $this->items[] = $itemData;
            }
        } else {
            // Update existing item
            if (isset($this->items[$this->selectedItem]['id'])) {
                $itemData['id'] = $this->items[$this->selectedItem]['id'];
            }
            $this->items[$this->selectedItem] = $itemData;
        }
        
        // Close modal
        $this->isOpenItemModal = false;
        $this->resetItem();
    }
    
    /**
     * Remove item
     */
    public function removeItem($index)
    {
        unset($this->items[$index]);
        $this->items = array_values($this->items);
    }
    
    /**
     * Close all modals
     */
    public function closeModal()
    {
        $this->isOpenRequestModal = false;
        $this->isOpenApprovalModal = false;
        $this->isOpenViewModal = false;
        $this->isOpenDeleteModal = false;
        $this->isOpenItemModal = false;
    }
    
    /**
     * Render the component
     */
    public function render()
    {
        return view('livewire.supply-chain.warehouse-transfers', [
            'transferRequests' => $this->transferRequests,
            'statusOptions' => [
                WarehouseTransferRequest::STATUS_DRAFT => __('messages.status_draft'),
                WarehouseTransferRequest::STATUS_PENDING => __('messages.status_pending'),
                WarehouseTransferRequest::STATUS_APPROVED => __('messages.status_approved'),
                WarehouseTransferRequest::STATUS_REJECTED => __('messages.status_rejected'),
                WarehouseTransferRequest::STATUS_IN_PROGRESS => __('messages.status_in_progress'),
                WarehouseTransferRequest::STATUS_COMPLETED => __('messages.status_completed'),
                WarehouseTransferRequest::STATUS_CANCELLED => __('messages.status_cancelled'),
            ],
            'priorityOptions' => [
                WarehouseTransferRequest::PRIORITY_LOW => __('messages.priority_low'),
                WarehouseTransferRequest::PRIORITY_NORMAL => __('messages.priority_normal'),
                WarehouseTransferRequest::PRIORITY_HIGH => __('messages.priority_high'),
                WarehouseTransferRequest::PRIORITY_URGENT => __('messages.priority_urgent'),
            ],
        ]);
    }
}
