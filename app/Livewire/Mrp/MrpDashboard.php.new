<?php

namespace App\Livewire\Mrp;

use Livewire\Component;
use App\Models\Mrp\DemandForecast;
use App\Models\Mrp\ProductionOrder;
use App\Models\Mrp\PurchasePlan;
use App\Models\Mrp\InventoryLevel;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

class MrpDashboard extends Component
{
    public $itemsToOrder = [];
    public $upcomingProduction = [];
    public $inventorySummary = [];
    public $demandForecastSummary = [];
    public $isLoadingStats = false;
    
    // Variáveis para cards do dashboard
    public $totalProductionOrders = 0;
    public $completedProductionOrders = 0;
    public $inProgressProductionOrders = 0;
    public $plannedProductionOrders = 0;
    public $totalDemandForecasts = 0;
    public $lastForecastUpdate = '-';
    public $totalPurchasePlans = 0;
    public $plannedPurchases = 0;
    public $orderedPurchases = 0;
    public $totalInventoryItems = 0;
    
    // Dados para gráficos
    public $productionChartData = [];
    
    /**
     * Mount the component
     */
    public function mount()
    {
        $this->loadDashboardData();
    }
    
    /**
     * Load all dashboard data
     */
    public function loadDashboardData()
    {
        $this->isLoadingStats = true;
        
        // Carregar itens que precisam ser pedidos (abaixo do ponto de reposição)
        $this->loadItemsToOrder();
        
        // Carregar ordens de produção próximas
        $this->loadUpcomingProduction();
        
        // Carregar resumo de estoque
        $this->loadInventorySummary();
        
        // Carregar resumo das previsões de demanda
        $this->loadDemandForecastSummary();
        
        // Carregar estatísticas para os cards do dashboard
        $this->loadProductionOrderStats();
        $this->loadDemandForecastStats();
        $this->loadPurchasePlanStats();
        $this->loadInventoryStats();
        
        // Carregar dados para gráficos
        $this->loadChartData();
        
        $this->isLoadingStats = false;
    }
    
    /**
     * Carrega itens que precisam ser pedidos
     */
    private function loadItemsToOrder()
    {
        // Check if the required tables exist before querying
        if (Schema::hasTable('mrp_inventory_levels') && Schema::hasTable('sc_products')) {
            try {
                // Esta consulta encontra produtos que estão abaixo do ponto de reposição
                $this->itemsToOrder = InventoryLevel::join('sc_products', 'mrp_inventory_levels.product_id', '=', 'sc_products.id')
                    ->select([
                        'sc_products.id',
                        'sc_products.name',
                        'sc_products.sku',
                        'mrp_inventory_levels.reorder_point',
                        'mrp_inventory_levels.safety_stock',
                        DB::raw('sc_products.stock_quantity as current_stock'),
                        DB::raw('mrp_inventory_levels.reorder_point - sc_products.stock_quantity as missing_quantity')
                    ])
                    ->whereRaw('sc_products.stock_quantity < mrp_inventory_levels.reorder_point')
                    ->orderByRaw('(mrp_inventory_levels.reorder_point - sc_products.stock_quantity) DESC')
                    ->limit(10)
                    ->get()
                    ->toArray();
            } catch (\Exception $e) {
                // Log the error but don't crash the dashboard
                \Log::error('Error loading items to order: ' . $e->getMessage());
                $this->itemsToOrder = [];
            }
        } else {
            // Tables don't exist yet, return empty array
            $this->itemsToOrder = [];
        }
    }
    
    /**
     * Carrega ordens de produção próximas
     */
    private function loadUpcomingProduction()
    {
        // Check if the required tables exist before querying
        if (Schema::hasTable('mrp_production_orders')) {
            try {
                // Ordens de produção que começam nos próximos dias
                $this->upcomingProduction = ProductionOrder::with(['product'])
                    ->whereIn('status', ['draft', 'released'])
                    ->where('planned_start_date', '>=', now())
                    ->where('planned_start_date', '<=', now()->addDays(30))
                    ->orderBy('planned_start_date')
                    ->limit(5)
                    ->get()
                    ->toArray();
            } catch (\Exception $e) {
                // Log the error but don't crash the dashboard
                \Log::error('Error loading upcoming production: ' . $e->getMessage());
                $this->upcomingProduction = [];
            }
        } else {
            // Table doesn't exist yet, return empty array
            $this->upcomingProduction = [];
        }
    }
    
    /**
     * Carrega resumo de estoque
     */
    private function loadInventorySummary()
    {
        // Check if the required tables exist before querying
        if (Schema::hasTable('mrp_inventory_levels')) {
            try {
                // Resumo dos níveis de estoque
                $summary = InventoryLevel::select([
                        DB::raw('COUNT(DISTINCT product_id) as total_products'),
                        DB::raw('SUM(CASE WHEN safety_stock > 0 THEN 1 ELSE 0 END) as with_safety_stock'),
                        DB::raw('AVG(reorder_point) as avg_reorder_point'),
                        DB::raw('AVG(lead_time_days) as avg_lead_time')
                    ])
                    ->first();
                    
                $this->inventorySummary = $summary ? $summary->toArray() : [
                    'total_products' => 0,
                    'with_safety_stock' => 0,
                    'avg_reorder_point' => 0,
                    'avg_lead_time' => 0
                ];
            } catch (\Exception $e) {
                // Log the error but don't crash the dashboard
                \Log::error('Error loading inventory summary: ' . $e->getMessage());
                $this->inventorySummary = [
                    'total_products' => 0,
                    'with_safety_stock' => 0,
                    'avg_reorder_point' => 0,
                    'avg_lead_time' => 0
                ];
            }
        } else {
            // Table doesn't exist yet, return empty summary
            $this->inventorySummary = [
                'total_products' => 0,
                'with_safety_stock' => 0,
                'avg_reorder_point' => 0,
                'avg_lead_time' => 0
            ];
        }
    }
    
    /**
     * Carrega resumo das previsões de demanda
     */
    private function loadDemandForecastSummary()
    {
        // Check if the required tables exist before querying
        if (Schema::hasTable('mrp_demand_forecasts')) {
            try {
                // Resumo das previsões de demanda
                $summary = DemandForecast::select([
                        DB::raw('COUNT(DISTINCT product_id) as products_with_forecast'),
                        DB::raw('COUNT(*) as total_forecasts'),
                        DB::raw('AVG(confidence_level) as avg_confidence'),
                        DB::raw('SUM(CASE WHEN forecast_date <= DATE_ADD(CURDATE(), INTERVAL 30 DAY) THEN 1 ELSE 0 END) as forecasts_next_30days')
                    ])
                    ->first();
                    
                $this->demandForecastSummary = $summary ? $summary->toArray() : [
                    'products_with_forecast' => 0,
                    'total_forecasts' => 0,
                    'avg_confidence' => 0,
                    'forecasts_next_30days' => 0
                ];
            } catch (\Exception $e) {
                // Log the error but don't crash the dashboard
                \Log::error('Error loading demand forecast summary: ' . $e->getMessage());
                $this->demandForecastSummary = [
                    'products_with_forecast' => 0,
                    'total_forecasts' => 0,
                    'avg_confidence' => 0,
                    'forecasts_next_30days' => 0
                ];
            }
        } else {
            // Table doesn't exist yet, return empty summary
            $this->demandForecastSummary = [
                'products_with_forecast' => 0,
                'total_forecasts' => 0,
                'avg_confidence' => 0,
                'forecasts_next_30days' => 0
            ];
        }
    }
    
    /**
     * Carrega estatísticas de ordens de produção para o dashboard
     */
    private function loadProductionOrderStats()
    {
        if (Schema::hasTable('mrp_production_orders')) {
            try {
                // Total de ordens de produção
                $this->totalProductionOrders = ProductionOrder::count();
                
                // Ordens completadas
                $this->completedProductionOrders = ProductionOrder::where('status', 'completed')->count();
                
                // Ordens em progresso
                $this->inProgressProductionOrders = ProductionOrder::where('status', 'in_progress')->count();
                
                // Ordens planejadas (draft + released)
                $this->plannedProductionOrders = ProductionOrder::whereIn('status', ['draft', 'released'])->count();
            } catch (\Exception $e) {
                // Log the error but don't crash the dashboard
                \Log::error('Error loading production order stats: ' . $e->getMessage());
                // Os valores padrão já estão definidos como 0
            }
        }
    }
    
    /**
     * Carrega estatísticas de previsões de demanda para o dashboard
     */
    private function loadDemandForecastStats()
    {
        if (Schema::hasTable('mrp_demand_forecasts')) {
            try {
                // Total de previsões de demanda
                $this->totalDemandForecasts = DemandForecast::count();
                
                // Última atualização
                $lastForecast = DemandForecast::latest('updated_at')->first();
                if ($lastForecast) {
                    $this->lastForecastUpdate = $lastForecast->updated_at->format('d/m/Y H:i');
                }
            } catch (\Exception $e) {
                // Log the error but don't crash the dashboard
                \Log::error('Error loading demand forecast stats: ' . $e->getMessage());
                // Os valores padrão já estão definidos
            }
        }
    }
    
    /**
     * Carrega estatísticas de planos de compra para o dashboard
     */
    private function loadPurchasePlanStats()
    {
        if (Schema::hasTable('mrp_purchase_plans')) {
            try {
                // Total de planos de compra
                $this->totalPurchasePlans = PurchasePlan::count();
                
                // Planos planejados (draft + approved)
                $this->plannedPurchases = PurchasePlan::whereIn('status', ['draft', 'approved'])->count();
                
                // Planos ordenados
                $this->orderedPurchases = PurchasePlan::where('status', 'ordered')->count();
            } catch (\Exception $e) {
                // Log the error but don't crash the dashboard
                \Log::error('Error loading purchase plan stats: ' . $e->getMessage());
                // Os valores padrão já estão definidos como 0
            }
        }
    }
    
    /**
     * Carrega estatísticas de inventário para o dashboard
     */
    private function loadInventoryStats()
    {
        if (Schema::hasTable('mrp_inventory_levels')) {
            try {
                // Total de itens de inventário monitorados
                $this->totalInventoryItems = InventoryLevel::count();
            } catch (\Exception $e) {
                // Log the error but don't crash the dashboard
                \Log::error('Error loading inventory stats: ' . $e->getMessage());
                // Os valores padrão já estão definidos como 0
            }
        }
    }
    
    /**
     * Carrega dados para os gráficos do dashboard
     */
    private function loadChartData()
    {
        if (Schema::hasTable('mrp_production_orders')) {
            try {
                // Dados para o gráfico de ordens de produção (simplificado)
                $this->productionChartData = [
                    'labels' => ['Planejadas', 'Em Progresso', 'Concluídas', 'Canceladas'],
                    'datasets' => [
                        [
                            'data' => [
                                $this->plannedProductionOrders,
                                $this->inProgressProductionOrders,
                                $this->completedProductionOrders,
                                ProductionOrder::where('status', 'cancelled')->count()
                            ],
                            'backgroundColor' => ['#3b82f6', '#eab308', '#16a34a', '#ef4444']
                        ]
                    ]
                ];
            } catch (\Exception $e) {
                // Log the error but don't crash the dashboard
                \Log::error('Error loading chart data: ' . $e->getMessage());
                $this->productionChartData = []; 
            }
        } else {
            $this->productionChartData = [
                'labels' => ['Planejadas', 'Em Progresso', 'Concluídas', 'Canceladas'],
                'datasets' => [
                    [
                        'data' => [0, 0, 0, 0],
                        'backgroundColor' => ['#3b82f6', '#eab308', '#16a34a', '#ef4444']
                    ]
                ]
            ];
        }
    }
    
    /**
     * Método para atualizar todos os dados do dashboard
     */
    public function refreshData()
    {
        $this->loadDashboardData();
    }
    
    public function render()
    {
        return view('livewire.mrp.mrp-dashboard');
    }
}
