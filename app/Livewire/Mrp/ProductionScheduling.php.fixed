<?php

namespace App\Livewire\Mrp;

use Livewire\Component;
use Livewire\WithPagination;
use App\Models\Mrp\ProductionSchedule;
use App\Models\Mrp\ProductionOrder;
use App\Models\Mrp\BomHeader;
use App\Models\Mrp\BomDetail;
use App\Models\Mrp\Line;
use App\Models\Mrp\Shift;
use App\Models\Mrp\FailureCategory;
use App\Models\Mrp\FailureRootCause;
use App\Models\Mrp\ProductionDailyPlan;
use App\Models\SupplyChain\Product;
use App\Models\SupplyChain\InventoryLocation as Location;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\DB;
use App\Livewire\Mrp\CompleteProductionTrait;

class ProductionScheduling extends Component
{
    use WithPagination;
    use CompleteProductionTrait;
    
    // Propriedades do componente
    public $search = '';
    public $sortField = 'start_date';
    public $sortDirection = 'asc';
    public $perPage = 10;
    public $currentTab = 'list';
    public $viewType = 'table'; // Tipo de visualização (tabela ou calendário)
    public $selectedShifts = []; // Array de IDs de turnos selecionados
    
    // Verificação de componentes
    public $componentAvailability = [];
    public $showComponentWarning = false;
    public $insufficientComponents = [];
    public $maxQuantityPossible = 0;
    
    // Propriedades para modal
    public $showModal = false;
    public $showDeleteModal = false;
    public $showOrdersModal = false;
    public $showViewModal = false; // Modal de visualização
    public $editMode = false;
    public $scheduleId = null;
    public $viewingSchedule = null; // Programação sendo visualizada
    public $scheduleToDelete = null; // Programacao a ser excluída
    public $confirmDelete = false; // Confirmação de exclusão
    
    // Propriedades do Daily Plan
    public $showDailyPlansModal = false;
    public $shifts = null;
    public $dailyPlans = [];
    public $selectedShiftId = null;
    public $selectedShiftName = null;
    public $filteredDailyPlans = [];
    public $editingDailyPlan = null;
    public $viewingDailyPlans = false;
    
    // Análise de impacto de paradas
    public $impactAnalysis = [];
    public $breakdownImpact = [];
    public $chartHistory = []; // Propriedade pública específica para o histórico usado nos gráficos
    
    
    // Nova ordem de produção
    public $newOrder = [
        'quantity' => '',
        'due_date' => '',
        'description' => '',
        'status' => 'pending'
    ];
    
    protected $listeners = [
        'startProduction' => 'startProduction',
        'completeProduction' => 'completeProduction',
        'updateWipInventory' => 'updateWipInventory',
        'updated:schedule.product_id' => 'checkComponentAvailability',
        'updated:schedule.planned_quantity' => 'checkComponentAvailability',
        'openDeleteModal' => 'openDeleteModal',  // Renomeado para evitar conflitos
        'viewDailyPlans' => 'viewDailyPlans',
        'updateDailyPlan' => 'updateDailyPlan',
        'closeDailyPlansModal' => 'closeDailyPlansModal',
        'view' => 'viewSchedule',
        'selectShift' => 'selectShift',
        'closeCreateEditModal' => 'closeCreateEditModal',
        'toggleShift' => 'toggleShift'
    ];
    
    /**
     * Recalcular planos diários com base nos parâmetros atuais da programação
     */
    public function recalculatePlans()
    {
        try {
            if (!$this->viewingSchedule || !$this->selectedShiftId) {
                $this->dispatch('notify',
                    type: 'error',
                    title: __('messages.error'),
                    message: __('messages.select_shift_first')
                );
                return;
            }
            
            \Illuminate\Support\Facades\Log::info('Recalculando planos diários', [
                'schedule_id' => $this->viewingSchedule->id,
                'shift_id' => $this->selectedShiftId
            ]);
            
            // Forçar um recálculo de todos os planos com base na Configuration Schedule original
            // Isso utiliza o modelo ProductionSchedule que implementamos antes
            $schedule = ProductionSchedule::find($this->viewingSchedule->id);
            
            if (!$schedule) {
                throw new \Exception('Programação não encontrada');
            }
            
            // Recalcular apenas os planos deste turno
            $result = $schedule->recalculateDailyPlans(false);
            
            // Recarregar os dados atualizados
            $this->viewDailyPlans($this->viewingSchedule->id);
            $this->updatedSelectedShiftId($this->selectedShiftId);
            
            // Notificar o usuário
            if (isset($result['success']) && $result['success']) {
                $this->dispatch('notify',
                    type: 'success',
                    title: __('messages.success'),
                    message: __('messages.plans_recalculated_successfully')
                );
            } else {
                $this->dispatch('notify',
                    type: 'warning',
                    title: __('messages.warning'),
                    message: $result['error'] ?? __('messages.error_recalculating_plans')
                );
            }
            
        } catch (\Exception $e) {
            \Illuminate\Support\Facades\Log::error('Erro ao recalcular planos diários', [
                'erro' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            $this->dispatch('notify',
                type: 'error',
                title: __('messages.error'),
                message: __('messages.error_recalculating_plans') . ": {$e->getMessage()}"
            );
        }
    }

    /**
     * Salvar planos diários de produção
     */
    public function saveDailyPlans()
    {
        try {
            if (!$this->viewingSchedule || !$this->selectedShiftId) {
                $this->dispatch('notify',
                    type: 'error',
                    title: __('messages.error'),
                    message: __('messages.select_shift_first')
                );
                return;
            }
            
            \Illuminate\Support\Facades\Log::info('Salvando planos diários', [
                'schedule_id' => $this->viewingSchedule->id,
                'shift_id' => $this->selectedShiftId,
                'total_planos' => count($this->filteredDailyPlans)
            ]);
            
            // Carregar planos existentes para esta programação e turno para evitar duplicidade
            $existingPlans = ProductionDailyPlan::where('schedule_id', $this->viewingSchedule->id)
                ->where('shift_id', $this->selectedShiftId)
                ->get()
                ->keyBy(function($plan) {
                    return $plan->production_date->format('Y-m-d');
                });
            
            \Illuminate\Support\Facades\Log::info('Planos existentes carregados', [
                'count' => $existingPlans->count()
            ]);
            
            // Iterar sobre os planos diários e salvar cada um
            foreach ($this->filteredDailyPlans as $index => $plan) {
                // Gerar chave para o dia
                $dateKey = \Carbon\Carbon::parse($plan['production_date'])->format('Y-m-d');
                
                \Illuminate\Support\Facades\Log::debug('Verificando plano para data', [
                    'date' => $dateKey,
                    'exists' => isset($existingPlans[$dateKey])
                ]);
                
                if (isset($plan['id']) && $plan['id']) {
                    // Se o plano já tem ID, atualizar
                    $dailyPlan = ProductionDailyPlan::find($plan['id']);
                    
                    if ($dailyPlan) {
                        $dailyPlan->update([
                            'planned_quantity' => $plan['planned_quantity'],
                            'status' => $plan['status'] ?? 'scheduled',
                            'notes' => $plan['notes'] ?? '',
                            // Garantir que o shift_id esteja definido
                            'shift_id' => $this->selectedShiftId
                        ]);
                        
                        \Illuminate\Support\Facades\Log::info('Plano diário atualizado', [
                            'id' => $dailyPlan->id,
                            'date' => $dailyPlan->production_date->format('Y-m-d'),
                            'shift_id' => $dailyPlan->shift_id,
                            'quantity' => $dailyPlan->planned_quantity
                        ]);
                    }
                } elseif (isset($existingPlans[$dateKey])) {
                    // Se o plano já existe mas não foi carregado na interface, atualizar apenas a quantidade
                    $existingPlan = $existingPlans[$dateKey];
                    $existingPlan->update([
                        'planned_quantity' => $plan['planned_quantity'],
                        'shift_id' => $this->selectedShiftId // Garantir que o shift_id esteja definido
                    ]);
                    
                    \Illuminate\Support\Facades\Log::info('Plano existente atualizado', [
                        'id' => $existingPlan->id,
                        'date' => $existingPlan->production_date->format('Y-m-d'),
                        'shift_id' => $existingPlan->shift_id,
                        'quantity' => $existingPlan->planned_quantity
                    ]);
                } else {
                    // Criar novo plano
                    $newPlan = ProductionDailyPlan::create([
                        'schedule_id' => $this->viewingSchedule->id,
                        'shift_id' => $this->selectedShiftId, // Definir o shift_id explicitamente
                        'production_date' => $plan['production_date'],
                        'planned_quantity' => $plan['planned_quantity'],
                        'actual_quantity' => 0,
                        'defect_quantity' => 0,
                        'has_breakdown' => false,
                        'breakdown_minutes' => 0,
                        'failure_category_id' => null,
                        'failure_root_causes' => null,
                        'status' => $plan['status'] ?? 'scheduled',
                        'notes' => $plan['notes'] ?? '',
                        'created_by' => auth()->id(),
                        'updated_by' => auth()->id()
                    ]);
                    
                    \Illuminate\Support\Facades\Log::info('Novo plano diário criado', [
                        'id' => $newPlan->id,
                        'date' => $newPlan->production_date->format('Y-m-d'),
                        'shift_id' => $newPlan->shift_id,
                        'quantity' => $newPlan->planned_quantity
                    ]);
                }
            }
            
            // Recarregar planos diários para mostrar dados atualizados
            $this->loadDailyPlans();
            
            // Recarregar dados
            $this->viewDailyPlans($this->viewingSchedule->id);
            
            $this->dispatch('notify',
                type: 'success',
                title: __('messages.success'),
                message: __('messages.daily_plans_saved')
            );
            
            return true;
        } catch (\Exception $e) {
            \Illuminate\Support\Facades\Log::error('Erro ao salvar planos diários', [
                'erro' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            $this->dispatch('notify',
                type: 'error',
                title: __('messages.error'),
                message: __('messages.failed_to_save_daily_plans')
            );
            
            return false;
        }
    }
    
    /**
     * Salvar um único plano diário de produção pelo índice
     * 
     * @param int $index Índice do plano a ser salvo
     * @return bool
     */
    public function saveDailyPlan($index)
    {
        try {
            if (!$this->viewingSchedule || !$this->selectedShiftId) {
                $this->dispatch('notify',
                    type: 'error',
                    title: __('messages.error'),
                    message: __('messages.select_shift_first')
                );
                return false;
            }
            
            // Verificar se o índice do plano é válido
            if (!isset($this->filteredDailyPlans[$index])) {
                $this->dispatch('notify',
                    type: 'error',
                    title: __('messages.error'),
                    message: __('messages.invalid_plan_index')
                );
                return false;
            }
            
            $plan = $this->filteredDailyPlans[$index];
            $dateKey = \Carbon\Carbon::parse($plan['production_date'])->format('Y-m-d');
            
            \Illuminate\Support\Facades\Log::info('Salvando plano diário individual', [
                'index' => $index,
                'date' => $dateKey,
                'schedule_id' => $this->viewingSchedule->id,
                'shift_id' => $this->selectedShiftId
            ]);
            
            if (isset($plan['id']) && $plan['id']) {
                // Se o plano já tem ID, atualizar
                $dailyPlan = ProductionDailyPlan::find($plan['id']);
                
                if ($dailyPlan) {
                    $dailyPlan->update([
                        'planned_quantity' => $plan['planned_quantity'],
                        'actual_quantity' => $plan['actual_quantity'] ?? 0,
                        'defect_quantity' => $plan['defect_quantity'] ?? 0,
                        'has_breakdown' => $plan['has_breakdown'] ?? false,
                        'breakdown_minutes' => $plan['breakdown_minutes'] ?? 0,
                        'failure_category_id' => $plan['failure_category_id'] ?? null,
                        'failure_root_causes' => $plan['failure_root_causes'] ?? null,
                        'status' => $plan['status'] ?? 'scheduled',
                        'notes' => $plan['notes'] ?? '',
                        'shift_id' => $this->selectedShiftId, // Garantir que o shift_id esteja definido
                        'updated_by' => auth()->id()
                    ]);
                    
                    \Illuminate\Support\Facades\Log::info('Plano diário individual atualizado', [
                        'id' => $dailyPlan->id,
                        'date' => $dailyPlan->production_date->format('Y-m-d'),
                        'shift_id' => $dailyPlan->shift_id,
                        'quantity' => $dailyPlan->planned_quantity
                    ]);
                }
            } else {
                // Verificar se já existe um plano para esta data e turno
                $existingPlan = ProductionDailyPlan::where('schedule_id', $this->viewingSchedule->id)
                    ->where('shift_id', $this->selectedShiftId)
                    ->whereDate('production_date', $dateKey)
                    ->first();
                
                if ($existingPlan) {
                    // Atualizar plano existente
                    $existingPlan->update([
                        'planned_quantity' => $plan['planned_quantity'],
                        'actual_quantity' => $plan['actual_quantity'] ?? 0,
                        'defect_quantity' => $plan['defect_quantity'] ?? 0,
                        'has_breakdown' => $plan['has_breakdown'] ?? false,
                        'breakdown_minutes' => $plan['breakdown_minutes'] ?? 0,
                        'failure_category_id' => $plan['failure_category_id'] ?? null,
                        'failure_root_causes' => $plan['failure_root_causes'] ?? null,
                        'status' => $plan['status'] ?? 'scheduled',
                        'notes' => $plan['notes'] ?? '',
                        'shift_id' => $this->selectedShiftId, // Garantir que o shift_id esteja definido
                        'updated_by' => auth()->id()
                    ]);
                    
                    // Atualizar o ID no array filtrado
                    $this->filteredDailyPlans[$index]['id'] = $existingPlan->id;
                    
                    \Illuminate\Support\Facades\Log::info('Plano existente atualizado individualmente', [
                        'id' => $existingPlan->id,
                        'date' => $existingPlan->production_date->format('Y-m-d'),
                        'shift_id' => $existingPlan->shift_id,
                        'quantity' => $existingPlan->planned_quantity
                    ]);
                } else {
                    // Criar novo plano
                    $newPlan = ProductionDailyPlan::create([
                        'schedule_id' => $this->viewingSchedule->id,
                        'shift_id' => $this->selectedShiftId, // Definir o shift_id explicitamente
                        'production_date' => $plan['production_date'],
                        'planned_quantity' => $plan['planned_quantity'],
                        'actual_quantity' => $plan['actual_quantity'] ?? 0,
                        'defect_quantity' => $plan['defect_quantity'] ?? 0,
                        'has_breakdown' => $plan['has_breakdown'] ?? false,
                        'breakdown_minutes' => $plan['breakdown_minutes'] ?? 0,
                        'failure_category_id' => $plan['failure_category_id'] ?? null,
                        'failure_root_causes' => $plan['failure_root_causes'] ?? null,
                        'status' => $plan['status'] ?? 'scheduled',
                        'notes' => $plan['notes'] ?? '',
                        'created_by' => auth()->id(),
                        'updated_by' => auth()->id()
                    ]);
                    
                    // Atualizar o ID no array filtrado
                    $this->filteredDailyPlans[$index]['id'] = $newPlan->id;
                    
                    \Illuminate\Support\Facades\Log::info('Novo plano diário criado individualmente', [
                        'id' => $newPlan->id,
                        'date' => $newPlan->production_date->format('Y-m-d'),
                        'shift_id' => $newPlan->shift_id,
                        'quantity' => $newPlan->planned_quantity
                    ]);
                }
            }
            
            // Notificar usuário
            $this->dispatch('notify',
                type: 'success',
                title: __('messages.success'),
                message: __('messages.daily_plan_saved')
            );
            
            return true;
        } catch (\Exception $e) {
            \Illuminate\Support\Facades\Log::error('Erro ao salvar plano diário individual', [
                'index' => $index,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            $this->dispatch('notify',
                type: 'error',
                title: __('messages.error'),
                message: __('messages.save_daily_plan_failed') . ": {$e->getMessage()}"
            );
            
            return false;
        }
    }
    
    /**
     * Atualizar um plano diário de produção
     * 
     * @param int $index Índice do plano a ser atualizado
     * @param array $data Dados atualizados
     */
    public function updateDailyPlan($index, $data = null)
    {
        // Implement your updateDailyPlan method logic here
    }
    
    /**
     * Load daily plans for the current schedule and shift
     */
    public function loadDailyPlans()
    {
        // Implement your loadDailyPlans method logic here
    }
    
    /**
     * Find and return a daily plan by ID
     */
    public function findDailyPlanById($id)
    {
        // Implement your findDailyPlanById method logic here
    }
    
    /**
     * Render method
     */
    public function render()
    {
        // Implement your render method logic here
    }
}
