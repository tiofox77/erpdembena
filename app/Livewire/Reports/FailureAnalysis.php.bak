<?php

namespace App\Livewire\Reports;

use Livewire\Component;
use App\Models\MaintenanceEquipment as Equipment;
use App\Models\MaintenanceArea as Area;
use App\Models\MaintenanceLine as Line;
use App\Models\MaintenanceCorrective as Corrective;
use App\Models\FailureMode;
use App\Models\FailureCause;
use App\Models\FailureModeCategory;
use App\Models\FailureCauseCategory;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class FailureAnalysis extends Component
{
    // Filters
    public $dateRange = 'month';
    public $startDate;
    public $endDate;
    public $selectedArea = 'all';
    public $selectedLine = 'all';
    public $selectedEquipment = 'all';
    public $sortField = 'updated_at';  // Alterado de 'date' para 'updated_at', que existe na tabela
    public $sortDirection = 'desc';

    // Modal control
    public $showDetailModal = false;
    public $selectedFailure = null;

    // Data properties
    public $areas = [];
    public $lines = [];
    public $equipment = [];
    public $failureRecords = [];
    public $totalFailures = 0;
    public $topFailureCause = '';
    public $topFailureCauseCount = 0;
    public $mostFailingEquipment = '';
    public $mostFailingEquipmentCount = 0;
    public $averageDowntime = 0;
    public $identifiedPatterns = [];

    // Chart data
    public $failureCausesData = [];
    public $failuresByEquipmentData = [];
    public $failuresOverTimeData = [];
    public $failureImpactData = [];
    public $categoriesDistributionData = [];

    // Initialize the component
    public function mount()
    {
        try {
            // Verificar a estrutura da tabela de manutencao corretiva
            Log::info('FailureAnalysis: Inicializando componente');
            
            // Verificar se tabela existe
            $tables = DB::select('SHOW TABLES');
            $tables = array_map(function($table) {
                return reset($table);
            }, $tables);
            
            Log::info('FailureAnalysis: Tabelas disponíveis no banco: ' . implode(', ', $tables));
            
            // Encontrar a tabela de manutenção corretiva
            $maintenanceTable = null;
            foreach ($tables as $table) {
                if (strpos($table, 'corrective') !== false || strpos($table, 'maintenance') !== false) {
                    Log::info("FailureAnalysis: Possível tabela de manutenção corretiva encontrada: {$table}");
                    $maintenanceTable = $table;
                }
            }
            
            if ($maintenanceTable) {
                $columns = DB::getSchemaBuilder()->getColumnListing($maintenanceTable);
                Log::info("FailureAnalysis: Colunas na tabela {$maintenanceTable}: " . implode(', ', $columns));
                
                // Verificar se tabela tem registros
                $count = DB::table($maintenanceTable)->count();
                Log::info("FailureAnalysis: Total de registros na tabela {$maintenanceTable}: {$count}");
                
                // Obter alguns registros de exemplo para diagnóstico
                $sample = DB::table($maintenanceTable)->take(3)->get();
                Log::info('FailureAnalysis: Exemplo de registros: ' . json_encode($sample));
            }
            
            // Set default date range based on current selection - use um período amplo para garantir dados
            $this->dateRange = 'year'; // Começar com um período maior para garantir dados
            $this->setDateRange();
            
            // Verificar se há registros no período amplo
            Log::info("FailureAnalysis: Período inicial definido: {$this->startDate} até {$this->endDate}");
            
            // Load areas, lines and equipment for filters
            $this->loadFilterOptions();
            
            Log::info('FailureAnalysis: Componente inicializado com sucesso');
        } catch (\Exception $e) {
            Log::error('FailureAnalysis: Erro ao inicializar componente: ' . $e->getMessage());
            Log::error($e->getTraceAsString());
        }
    }

    // Listeners for Livewire events
    protected $listeners = [
        'refreshFailureAnalysis' => '$refresh',
        'dateRangeSelected' => 'setCustomDateRange'
    ];

    // Set date range based on current selection
    public function setDateRange()
    {
        // ⚠️ IMPORTANTE: Sempre use uma nova instância do Carbon para cada data
        // para evitar modificação acidental do mesmo objeto
        
        switch ($this->dateRange) {
            case 'week':
                $this->startDate = Carbon::now()->startOfWeek()->format('Y-m-d');
                $this->endDate = Carbon::now()->endOfWeek()->format('Y-m-d');
                break;
            case 'month':
                $this->startDate = Carbon::now()->startOfMonth()->format('Y-m-d');
                $this->endDate = Carbon::now()->endOfMonth()->format('Y-m-d');
                break;
            case 'quarter':
                $this->startDate = Carbon::now()->startOfQuarter()->format('Y-m-d');
                $this->endDate = Carbon::now()->endOfQuarter()->format('Y-m-d');
                break;
            case 'year':
                $this->startDate = Carbon::now()->startOfYear()->format('Y-m-d');
                $this->endDate = Carbon::now()->endOfYear()->format('Y-m-d');
                break;
            case 'custom':
                // If custom, dates should be set by the user
                if (!$this->startDate) $this->startDate = Carbon::now()->subMonth()->format('Y-m-d');
                if (!$this->endDate) $this->endDate = Carbon::now()->format('Y-m-d');
                break;
            default:
                // Caso padrão: últimos 3 meses
                $this->startDate = Carbon::now()->subMonths(3)->format('Y-m-d');
                $this->endDate = Carbon::now()->format('Y-m-d');
        }
        
        Log::info("FailureAnalysis: Definido período de {$this->startDate} até {$this->endDate}");
    }

    // Set custom date range
    public function setCustomDateRange($startDate, $endDate)
    {
        $this->startDate = $startDate;
        $this->endDate = $endDate;
        $this->dateRange = 'custom';
    }

    // Load filter options
    public function loadFilterOptions()
    {
        try {
            // Load areas for filter - as associative array of id => name
            $this->areas = Area::orderBy('name')->get()->pluck('name', 'id')->toArray();
            
            // Load lines based on selected area - as associative array of id => name
            $this->lines = $this->selectedArea !== 'all'
                ? Line::where('area_id', $this->selectedArea)->orderBy('name')->get()->pluck('name', 'id')->toArray()
                : Line::orderBy('name')->get()->pluck('name', 'id')->toArray();
            
            // Load equipment based on selected line - as associative array of id => name
            $this->equipment = $this->selectedLine !== 'all'
                ? Equipment::where('line_id', $this->selectedLine)->orderBy('name')->get()->pluck('name', 'id')->toArray()
                : ($this->selectedArea !== 'all'
                    ? Equipment::whereHas('line', function ($query) {
                        $query->where('area_id', $this->selectedArea);
                    })->orderBy('name')->get()->pluck('name', 'id')->toArray()
                    : Equipment::orderBy('name')->get()->pluck('name', 'id')->toArray());
            
        } catch (\Exception $e) {
            Log::error('Error loading filter options: ' . $e->getMessage());
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Erro ao carregar opções de filtro'
            ]);
        }
    }

    // Updated lifecycle hooks for filter changes
    public function updatedSelectedArea()
    {
        $this->selectedLine = 'all';
        $this->selectedEquipment = 'all';
        $this->loadFilterOptions();
    }

    public function updatedSelectedLine()
    {
        $this->selectedEquipment = 'all';
        $this->loadFilterOptions();
    }

    public function updatedDateRange()
    {
        $this->setDateRange();
    }

    // Resetar filtros para valores padrão
    public function resetFilters()
    {
        $this->dateRange = 'month';
        $this->setDateRange();
        $this->selectedArea = 'all';
        $this->selectedLine = 'all';
        $this->selectedEquipment = 'all';
        $this->loadFilterOptions();
    }
    
    // Load failure data based on selected filters
    protected function loadFailureData()
    {
        try {
            // Vamos verificar a estrutura da tabela para diagnóstico
            Log::info('FailureAnalysis: Verificando estrutura da tabela MaintenanceCorrective');
            $columns = DB::getSchemaBuilder()->getColumnListing('maintenance_correctives');
            Log::info('FailureAnalysis: Colunas encontradas: ' . implode(', ', $columns));
            
            // Verificar se existe a coluna 'date'
            if (!in_array('date', $columns)) {
                // Se não existir 'date', procurar por outras colunas de data
                $dateCols = array_filter($columns, function($col) {
                    return strpos($col, 'date') !== false || strpos($col, 'data') !== false;
                });
                Log::info('FailureAnalysis: Colunas de data encontradas: ' . implode(', ', $dateCols));
                
                // Se encontrou colunas alternativas de data, usar a primeira
                if (!empty($dateCols)) {
                    $dateColumn = reset($dateCols);
                    Log::info("FailureAnalysis: Usando coluna alternativa para data: {$dateColumn}");
                } else {
                    Log::warning('FailureAnalysis: Nenhuma coluna de data encontrada!');
                    $dateColumn = 'created_at'; // Fallback para created_at
                }
            } else {
                $dateColumn = 'date';
            }
            
            // Verificar quantidade de registros sem filtros
            $totalRecords = Corrective::count();
            Log::info("FailureAnalysis: Total de registros na tabela sem filtros: {$totalRecords}");
            
            // Verificar registros existentes no período
            $recordsInPeriod = Corrective::whereBetween($dateColumn, [$this->startDate, $this->endDate])->count();
            Log::info("FailureAnalysis: Registros no período {$this->startDate} a {$this->endDate}: {$recordsInPeriod}");
            
            // Verificar quais relacionamentos existem no modelo
            $relationshipsToLoad = ['equipment', 'failureMode', 'failureCause'];
            
            // Verificar relacionamentos aninhados
            $model = new Corrective();
            if (method_exists($model, 'equipment')) {
                // Verificar se equipment.line existe
                if (method_exists($model->equipment()->getRelated(), 'line')) {
                    // Verificar se equipment.line.area existe
                    if (method_exists($model->equipment()->getRelated()->line()->getRelated(), 'area')) {
                        $relationshipsToLoad[] = 'equipment.line.area';
                    }
                }
            }
            
            // Verificar relações com usuários
            $columns = array_flip($columns);
            if (isset($columns['reported_by']) && method_exists($model, 'reporter')) {
                $relationshipsToLoad[] = 'reporter';
            }
            if (isset($columns['resolved_by']) && method_exists($model, 'resolver')) {
                $relationshipsToLoad[] = 'resolver';
            }
            
            Log::info('FailureAnalysis: Carregando relacionamentos: ' . implode(', ', $relationshipsToLoad));
            
            // Iniciar consulta com os filtros
            $query = Corrective::query()
                ->with($relationshipsToLoad)
                ->whereBetween($dateColumn, [$this->startDate, $this->endDate]);

            // Apply area filter
            if ($this->selectedArea !== 'all') {
                $query->whereHas('equipment.line.area', function ($q) {
                    $q->where('id', $this->selectedArea);
                });
                
                $areaCount = $query->count();
                Log::info("FailureAnalysis: Após filtro de área {$this->selectedArea}: {$areaCount} registros");
            }

            // Apply line filter
            if ($this->selectedLine !== 'all') {
                $query->whereHas('equipment.line', function ($q) {
                    $q->where('id', $this->selectedLine);
                });
                
                $lineCount = $query->count();
                Log::info("FailureAnalysis: Após filtro de linha {$this->selectedLine}: {$lineCount} registros");
            }

            // Apply equipment filter
            if ($this->selectedEquipment !== 'all') {
                $query->where('equipment_id', $this->selectedEquipment);
                
                $equipmentCount = $query->count();
                Log::info("FailureAnalysis: Após filtro de equipamento {$this->selectedEquipment}: {$equipmentCount} registros");
            }

            // Apply sorting - Usar campo de data adequado para ordenar
            try {
                // Verificar se a coluna de ordenação existe
                if (in_array($this->sortField, $columns)) {
                    $query->orderBy($this->sortField, $this->sortDirection);
                } else {
                    // Fallback para updated_at se o campo de ordenação não existir
                    Log::warning("FailureAnalysis: Campo de ordenação {$this->sortField} não encontrado, usando updated_at");
                    $query->orderBy('updated_at', $this->sortDirection);
                }
            } catch (\Exception $e) {
                Log::warning("FailureAnalysis: Erro ao aplicar ordenação: {$e->getMessage()}");
                // Não aplicar ordenação em caso de erro
            }

            $result = $query->get();
            Log::info("FailureAnalysis: Consulta final retornou {$result->count()} registros");
            
            return $result;
        } catch (\Exception $e) {
            Log::error('FailureAnalysis: Erro ao carregar dados: ' . $e->getMessage());
            Log::error($e->getTraceAsString());
            return collect(); // Retorna coleção vazia em caso de erro
        }
    }

    // Generate statistics from the loaded data
    protected function generateStatistics($failures)
    {
        try {
            Log::info('FailureAnalysis: Gerando estatísticas com ' . $failures->count() . ' registros');
            
            // Registrar em log os atributos disponíveis no primeiro registro para entender a estrutura
            if ($failures->isNotEmpty()) {
                $firstFailure = $failures->first();
                Log::info('FailureAnalysis: Propriedades do primeiro registro: ' . json_encode($firstFailure));
                
                // Verificar se o relacionamento com equipamento está correto
                if ($firstFailure->equipment) {
                    Log::info('FailureAnalysis: Nome do equipamento: ' . $firstFailure->equipment->name);
                } else {
                    Log::warning('FailureAnalysis: Relacionamento com equipamento não encontrado!');
                }
                
                // Verificar se o relacionamento com cause está correto
                if ($firstFailure->failureCause) {
                    Log::info('FailureAnalysis: Nome da causa: ' . $firstFailure->failureCause->name);
                } else {
                    Log::warning('FailureAnalysis: Relacionamento com causa de falha não encontrado!');
                }
                
                // Verificar a propriedade de downtime
                $downtimeProperty = null;
                foreach ($firstFailure->getAttributes() as $key => $value) {
                    if (strpos($key, 'downtime') !== false || strpos($key, 'tempo') !== false) {
                        $downtimeProperty = $key;
                        Log::info("FailureAnalysis: Propriedade de tempo de parada encontrada: {$key} = {$value}");
                    }
                }
                
                if (!$downtimeProperty) {
                    Log::warning('FailureAnalysis: Nenhuma propriedade de tempo de parada encontrada!');
                }
            }
            
            $this->totalFailures = $failures->count();
            Log::info("FailureAnalysis: Total de falhas: {$this->totalFailures}");

            if ($this->totalFailures > 0) {
                // Para facilitar o debug, vamos exibir dados mesmo com relacionamentos incorretos
                // Se não houver dados disponíveis via relacionamentos, usaremos informação de "Desconhecido" para demonstrar
                
                // Calculate most common failure cause
                try {
                    $causeCounts = $failures->groupBy('failure_cause_id')
                        ->map(function ($group) {
                            $name = 'Desconhecido';
                            try {
                                if ($group->first()->failureCause && $group->first()->failureCause->name) {
                                    $name = $group->first()->failureCause->name;
                                }
                            } catch (\Exception $e) {
                                Log::warning('FailureAnalysis: Erro ao acessar nome da causa: ' . $e->getMessage());
                            }
                            
                            return [
                                'id' => $group->first()->failure_cause_id ?? null,
                                'name' => $name,
                                'count' => $group->count()
                            ];
                        })
                        ->sortByDesc('count')
                        ->values();

                    if ($causeCounts->isNotEmpty()) {
                        $topCause = $causeCounts->first();
                        $this->topFailureCause = $topCause['name'];
                        $this->topFailureCauseCount = $topCause['count'];
                        Log::info("FailureAnalysis: Causa principal: {$this->topFailureCause} ({$this->topFailureCauseCount} ocorrências)");
                    } else {
                        $this->topFailureCause = 'Não identificado';
                        $this->topFailureCauseCount = 0;
                        Log::warning('FailureAnalysis: Nenhuma causa de falha identificada');
                    }
                } catch (\Exception $e) {
                    $this->topFailureCause = 'Erro na análise';
                    $this->topFailureCauseCount = 0;
                    Log::error('FailureAnalysis: Erro ao calcular causas de falha: ' . $e->getMessage());
                }
                
                // Calculate equipment with most failures
                try {
                    $equipmentCounts = $failures->groupBy('equipment_id')
                        ->map(function ($group) {
                            $name = 'Desconhecido';
                            try {
                                if ($group->first()->equipment && $group->first()->equipment->name) {
                                    $name = $group->first()->equipment->name;
                                }
                            } catch (\Exception $e) {
                                Log::warning('FailureAnalysis: Erro ao acessar nome do equipamento: ' . $e->getMessage());
                            }
                            
                            return [
                                'id' => $group->first()->equipment_id ?? null,
                                'name' => $name,
                                'count' => $group->count()
                            ];
                        })
                        ->sortByDesc('count')
                        ->values();

                    if ($equipmentCounts->isNotEmpty()) {
                        $topEquipment = $equipmentCounts->first();
                        $this->mostFailingEquipment = $topEquipment['name'];
                        $this->mostFailingEquipmentCount = $topEquipment['count'];
                        Log::info("FailureAnalysis: Equipamento mais crítico: {$this->mostFailingEquipment} ({$this->mostFailingEquipmentCount} falhas)");
                    } else {
                        $this->mostFailingEquipment = 'Não identificado';
                        $this->mostFailingEquipmentCount = 0;
                        Log::warning('FailureAnalysis: Nenhum equipamento com falhas identificado');
                    }
                } catch (\Exception $e) {
                    $this->mostFailingEquipment = 'Erro na análise';
                    $this->mostFailingEquipmentCount = 0;
                    Log::error('FailureAnalysis: Erro ao calcular equipamentos com falhas: ' . $e->getMessage());
                }

                // Calculate average downtime
                try {
                    $downtimeField = 'downtime_length';
                    $totalDowntime = 0;
                    
                    foreach ($failures as $failure) {
                        if (isset($failure->$downtimeField) && is_numeric($failure->$downtimeField)) {
                            $totalDowntime += $failure->$downtimeField;
                        }
                    }
                    
                    $this->averageDowntime = $this->totalFailures > 0 
                        ? round($totalDowntime / $this->totalFailures, 1) 
                        : 0;
                    
                    Log::info("FailureAnalysis: Tempo médio de parada: {$this->averageDowntime}");
                } catch (\Exception $e) {
                    $this->averageDowntime = 0;
                    Log::error('FailureAnalysis: Erro ao calcular tempo médio de parada: ' . $e->getMessage());
                }
                
                // Identificar padrões nos dados
                $this->identifyPatterns($failures);
            }
        } catch (\Exception $e) {
            Log::error('FailureAnalysis: Erro geral ao gerar estatísticas: ' . $e->getMessage());
            $this->setEmptyState();
        }
    }
    
    // Process data to identify patterns
    protected function identifyPatterns($failures) {
        try {
            $this->patterns = [];
            $equipmentInfo = [];
            
            // Coletar informações dos equipamentos para referência
            foreach ($failures as $failure) {
                if ($failure->equipment_id && $failure->equipment) {
                    $area = 'Não especificada';
                    $line = 'Não especificada';
                    
                    try {
                        if ($failure->equipment->line && $failure->equipment->line->area) {
                            $area = $failure->equipment->line->area->name;
                            $line = $failure->equipment->line->name;
                        }
                    } catch (\Exception $ex) {
                        // Ignora erro e usa valores padrão
                    }
                    
                    $equipmentInfo[$failure->equipment_id] = [
                        'name' => $failure->equipment->name ?? 'Equipamento #' . $failure->equipment_id,
                        'area' => $area,
                        'line' => $line
                    ];
                }
            }
            
            // Pattern 1: Recurring equipment failures (same equipment, same cause)
            $recurringFailures = $failures->groupBy(['equipment_id', 'failure_cause_id'])
                ->filter(function ($group) {
                    return $group->count() >= 3; // Consider recurring if 3+ occurrences
                });
            
            foreach ($recurringFailures as $equipmentId => $causeGroups) {
                foreach ($causeGroups as $causeId => $occurrences) {
                    $equipment = $occurrences->first()->equipment ? $occurrences->first()->equipment->name : 'Desconhecido';
                    $cause = $occurrences->first()->failureCause ? $occurrences->first()->failureCause->name : 'Desconhecido';
                    $area = 'Área não especificada';
                    
                    // Tentar obter a área do equipamento com segurança
                    try {
                        if (isset($equipmentInfo[$equipmentId]['area'])) {
                            $area = $equipmentInfo[$equipmentId]['area'];
                        } elseif ($occurrences->first()->equipment && 
                                 $occurrences->first()->equipment->line && 
                                 $occurrences->first()->equipment->line->area) {
                            $area = $occurrences->first()->equipment->line->area->name;
                        }
                    } catch (\Exception $ex) {
                        // Silenciar exceção e usar valor padrão
                        Log::warning('FailureAnalysis: Não foi possível obter a área do equipamento ID: ' . $equipmentId);
                    }
                    
                    $this->patterns[] = [
                        'type' => 'recurring_failure',
                        'title' => "Falha Recorrente: {$equipment}",
                        'description' => "O equipamento '{$equipment}' apresentou a mesma causa de falha '{$cause}' {$occurrences->count()} vezes no período analisado.",
                        'count' => $occurrences->count(),
                        'severity' => $occurrences->count() >= 5 ? 'high' : 'medium',
                        'equipment' => $equipment,
                        'cause' => $cause,
                        'area' => $area
                    ];
                }
            }
            
            // Pattern 2: Area-wide problems (multiple equipment in same area, similar causes)
            $areaIssues = $failures->groupBy(function ($failure) {
                return $failure->equipment && $failure->equipment->line && $failure->equipment->line->area 
                    ? $failure->equipment->line->area->id 
                    : 'unknown';
            });
            
            foreach ($areaIssues as $areaId => $areaFailures) {
                if ($areaId === 'unknown') continue;
                
                $causeGroups = $areaFailures->groupBy('failure_cause_id');
                
                foreach ($causeGroups as $causeId => $causeFailures) {
                    if ($causeFailures->count() >= 5) { // Area problem if same cause in 5+ cases
                        $affectedEquipment = $causeFailures->pluck('equipment.name')->unique()->filter()->implode(', ');
                        $area = $causeFailures->first()->equipment->line->area->name ?? 'Desconhecido';
                        $cause = $causeFailures->first()->failureCause ? $causeFailures->first()->failureCause->name : 'Desconhecido';
                        
                        $this->patterns[] = [
                            'type' => 'area_problem',
                            'title' => "Problema na Área: {$area}",
                            'description' => "A área '{$area}' apresenta múltiplos equipamentos com falhas relacionadas a '{$cause}'.",
                            'count' => $causeFailures->count(),
                            'severity' => 'high',
                            'area' => $area,
                            'cause' => $cause,
                            'equipment' => $affectedEquipment
                        ];
                    }
                }
            }
            
            // Pattern 3: Time-based patterns (failures increasing over time)
            if ($failures->count() >= 10) {
                $dateFormat = 'Y-m-d';
                $startDate = Carbon::parse($this->startDate);
                $endDate = Carbon::parse($this->endDate);
                $halfPoint = $startDate->copy()->addDays($startDate->diffInDays($endDate) / 2);
                
                $firstHalf = $failures->filter(function ($failure) use ($halfPoint, $dateFormat) {
                    // Temos que fazer um tratamento adequado para o campo de data
                    $failureDate = null;
                    // Verificar possíveis campos de data
                    if (isset($failure->date)) {
                        $failureDate = $failure->date;
                    } elseif (isset($failure->created_at)) {
                        $failureDate = $failure->created_at;
                    } elseif (isset($failure->updated_at)) {
                        $failureDate = $failure->updated_at;
        }
        
        // Empty chart data
        $this->failureCausesData = $this->getEmptyChartData('Sem dados');
        $this->failuresByEquipmentData = $this->getEmptyChartData('Sem dados');
        $this->failuresOverTimeData = $this->getEmptyChartData('Sem dados');
        $this->failureImpactData = $this->getEmptyChartData('Sem dados');
        
        // Empty categories distribution data - precisa ter a estrutura específica com 'mode' e 'cause'
        $this->categoriesDistributionData = [
            'mode' => $this->getEmptyChartData('Sem dados de categorias de modo'),
            'cause' => $this->getEmptyChartData('Sem dados de categorias de causa')
        ];
    }
    
    // Helper function to generate empty chart data
    protected function getEmptyChartData($message = 'Sem dados')
    {
        return [
            'labels' => [$message],
            'datasets' => [
                [
                    'label' => 'Sem dados disponíveis',
                    'data' => [0],
                    'backgroundColor' => ['#CBD5E1'],
                    'borderColor' => ['#94A3B8'],
                    'borderWidth' => 1
                ]
            ]
        ];
    }
    
    // Helper function to generate random colors for charts
    protected function generateRandomColor()
    {
        $colors = [
            '#4F46E5', // Indigo
            '#2563EB', // Blue
            '#7C3AED', // Violet
            '#DB2777', // Pink
            '#059669', // Green
            '#D97706', // Amber
            '#DC2626', // Red
            '#4338CA', // Indigo dark
            '#1D4ED8', // Blue dark
            '#9333EA', // Purple
            '#C026D3', // Fuchsia
            '#065F46', // Green dark
            '#B45309', // Amber dark
            '#991B1B', // Red dark
        ];
        
        return $colors[array_rand($colors)];
    }

    // Show failure details modal
    public function showFailureDetails($failureId)
    {
        try {
            // Verificar quais relacionamentos existem no modelo
            $relationshipsToLoad = ['equipment', 'failureMode', 'failureCause'];
            
            // Verificar relacionamentos aninhados
            $model = new Corrective();
            if (method_exists($model, 'equipment')) {
                // Verificar se equipment.line existe
                if (method_exists($model->equipment()->getRelated(), 'line')) {
                    $relationshipsToLoad[] = 'equipment.line';
                    // Verificar se equipment.line.area existe
                    if (method_exists($model->equipment()->getRelated()->line()->getRelated(), 'area')) {
                        $relationshipsToLoad[] = 'equipment.line.area';
                    }
                }
            }
            
            // Verificar relações com usuários
            if (method_exists($model, 'reporter')) {
                $relationshipsToLoad[] = 'reporter';
            } else if (method_exists($model, 'requestedBy')) {
                $relationshipsToLoad[] = 'requestedBy';
            }
            
            if (method_exists($model, 'resolver')) {
                $relationshipsToLoad[] = 'resolver';
            } else if (method_exists($model, 'solvedBy')) {
                $relationshipsToLoad[] = 'solvedBy';
            }
            
            Log::info('FailureAnalysis: Carregando relacionamentos para detalhes: ' . implode(', ', $relationshipsToLoad));
            
            $this->selectedFailure = Corrective::with($relationshipsToLoad)->findOrFail($failureId);
            
            $this->showDetailModal = true;
            
        } catch (\Exception $e) {
            Log::error('Error showing failure details: ' . $e->getMessage());
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Erro ao carregar detalhes da falha'
            ]);
        }
    }
    
    // Close modal
    public function closeModal()
    {
        $this->showDetailModal = false;
        $this->selectedFailure = null;
    }

    // Main render method
    public function render()
    {
        try {
            Log::info('FailureAnalysis: Starting to load data');
            
            // Load failure data based on filters
            $failures = $this->loadFailureData();
            
            // Store failures for table display
            $this->failureRecords = $failures;
            
            if ($failures->isNotEmpty()) {
                Log::info('FailureAnalysis: Found ' . $failures->count() . ' failure records');
                
                // Generate statistics
                $this->generateStatistics($failures);
                
                // Calculate data for all charts
                $this->calculateFailureCauses($failures);
                $this->calculateFailuresByEquipment($failures);
                $this->calculateFailuresOverTime($failures);
                $this->calculateFailureImpact($failures);
                $this->calculateCategoriesDistribution($failures);
                $this->analyzePatterns($failures);
                
                Log::info('FailureAnalysis: All charts and analyses generated successfully');
            } else {
                Log::info('FailureAnalysis: No failure records found for the selected filters');
                $this->setEmptyState();
            }
            
            return view('livewire.reports.failure-analysis');
            
        } catch (\Exception $e) {
            Log::error('Error in FailureAnalysis render method: ' . $e->getMessage());
            Log::error($e->getTraceAsString());
            
            $this->dispatch('showToast', [
                'type' => 'error',
                'message' => 'Erro ao processar relatório de análise de falhas'
            ]);
            
            $this->setEmptyState();
            return view('livewire.reports.failure-analysis');
        }
    }
}
